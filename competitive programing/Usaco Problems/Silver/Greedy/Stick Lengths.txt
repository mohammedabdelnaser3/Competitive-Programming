#include<bits/stdc++.h>

using namespace std;

#define ll long long
#define all(a) a.begin(),a.end()
int dx[] = {0, 1, 0, -1, 1, 1, -1, -1};
int dy[] = {1, 0, -1, 0, 1, -1, 1, -1};

const ll N = 1e5 + 5, MOD = 1e9 + 7;


struct segmentTree {
    int n;
    vector<pair<int,int>> st;

    void init(int _n) {
        n = _n;
        st.resize(4 * n);
    }

    void build(int begin, int end, int node, vector<int> &v) {
        // base case if node is leaf
        if (begin == end) {
            st[node] = {v[begin], 1};
            return;
        }

        int md = (begin + end) >> 1;

        //create the left nodes
        build(begin, md, 2 * node + 1, v);

        //create the right nodes
        build(md + 1, end, 2 * node + 2, v);

        if (st[2 * node + 2] == st[2 * node + 1]) {
            st[node] = {st[2 * node + 2].first, st[2 * node + 2].second + st[2 * node + 1].second};
            return;
        }
        st[node] = min(st[2 * node + 1] , st[2 * node + 2]);
    }

    void build(vector<int> &v) {
        build(0, n - 1, 0, v);
    }

    pair<int,int> query(int begin, int end, int node, int l, int r) {
        //no overlapping
        if (begin > r || end < l)
            return {1e9 + 5, 1e9};

        // overlapping exist
        if (l <= begin && r >= end)
            return st[node];

        // partial overlapping
        int md = (begin + end) >> 1;
        pair<int, int> a  = query(begin, md, 2 * node + 1, l, r), b = query(md + 1, end, 2 * node + 2, l, r);

        if(a.first == b.first)
            return {a.first, a.second + b.second};

        return min(a, b);
    }

    pair<int,int> query(int l, int r) {
        return query(0, n - 1, 0, l, r);
    }

    void update(int begin, int end, int node, int x, int y) {
        if (begin == x && end == x) {
            st[node] = {y, 1};
            return;
        }

        int md = (begin + end) >> 1;
        if (x <= md)
            update(begin, md, 2 * node + 1, x, y);
        else
            update(md + 1, end, 2 * node + 2, x, y);

        if (st[2 * node + 2].first == st[2 * node + 1].first) {
            st[node] = {st[2 * node + 2].first, st[2 * node + 2].second + st[2 * node + 1].second};
            return;
        }
        st[node] = min(st[2 * node + 1], st[2 * node + 2]);
    }

    void update(int x, int y) {
        update(0, n - 1, 0, x, y);
    }
};
bool compare(pair<int,int> a, pair<int, int> b){
    return a.second < b.second;
}
void solve() {
    int n;
    ll sum = 0;
    cin >> n;
    vector<int>v(n);
    for(int&i:v) cin >> i;
    sort(all(v));
    sum = v[n / 2];
    ll ans = 0;
    for (int i = 0; i < n; ++i) {
        ans += abs(v[i] - sum);
    }

    cout << ans << '\n';
}

int main() {
    ios::sync_with_stdio(NULL), cin.tie(NULL), cout.tie(NULL);
#/*ifndef ONLINE_JUDGE
    freopen("outofplace.in", "r", stdin);
    freopen("outofplace.out", "w", stdout);
//    freopen("error.txt", "w", stderr);
#endif*/
    int test = 1;
//    cin >> test;
    while (test--)
        solve();
}


