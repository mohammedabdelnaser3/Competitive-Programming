
struct segmentTree {
    int n;
    vector<int> st;

    void init(int _n) {
        n = _n;
        st.resize(4 * n);
    }

    void build(int begin, int end, int node, vector<int> &v, bool flag) {
        // leaf node base case
        if (begin == end) {
            Or = flag;
            st[node] = v[begin];
            return;
        }

        int md = (begin + end) >> 1;

        // left subtree is (start,mid)
        build(begin, md, 2 * node + 1, v, !flag);

        //right subtree is (start,mid)
        build(md + 1, end, 2 * node + 2, v, !flag);

        st[node] = (st[2 * node + 1] + st[2 * node + 2]);
    }

    void build(vector<int> &v) {
        build(0, n - 1, 0, v, true);
    }

    int query(int begin, int end, int node, int l, int r) {
        // non overlapping case
        if (begin > r || end < l)
            return 0;

        // complete overlap
        if (l <= begin && r >= end)
            return st[node];

        // partial case
        int md = (begin + end) >> 1;
        return query(begin, md, 2 * node + 1, l, r) + query(md + 1, end, 2 * node + 2, l, r);
    }

    int query(int l, int r) {
        return query(0, n - 1, 0, l, r);
    }

    void update(int begin, int end, int node, int x, int y, bool flag) {
	// base case
        if (begin == x && end == x) {
            st[node] = y;
            return;
        }

        int md = (begin + end) >> 1;
        if (x <= md)
            update(begin, md, 2 * node + 1, x, y, !flag);	// left subtree
        else
            update(md + 1, end, 2 * node + 2, x, y, !flag);

        st[node] = (st[2 * node + 1] + st[2 * node + 2]);	// right subtree
    }

    void update(int x, int y) {
        update(0, n - 1, 0, x, y, true);
    }
};